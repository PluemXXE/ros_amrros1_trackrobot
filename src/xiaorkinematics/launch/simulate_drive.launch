<?xml version="1.0" encoding="UTF-8"?>
<launch>

    <!-- ===================================================================================== -->
    <!-- |                                 ARGUMENTS & OPTIONS                                 | -->
    <!-- ===================================================================================== -->
    <!-- It's a good practice to define arguments at the top of the launch file.             -->
    <!-- This allows you to easily change behavior from the command line if needed.          -->
    <!-- For example: roslaunch xiaorkinematics simulate_drive.launch run_driver:=false      -->

    <arg name="run_driver" default="true" doc="Set to false to only launch the simulation without running the square driver node."/>


    <!-- ===================================================================================== -->
    <!-- |               STEP 1: LAUNCH THE SIMULATION ENVIRONMENT (GAZEBO)                  | -->
    <!-- ===================================================================================== -->
    <!-- We use the <include> tag to run another launch file. This is the core principle     -->
    <!-- of modularity in ROS. We are re-using the 'gazebo_control.launch' file from the     -->
    <!-- 'transbot_description' package, which is responsible for:                           -->
    <!--   1. Starting the Gazebo world.                                                     -->
    <!--   2. Loading the robot's URDF model into the parameter server.                      -->
    <!--   3. Spawning the robot model into Gazebo.                                          -->
    <!--   4. Loading the controller configurations (from controllers.yaml).                 -->
    <!--   5. Starting the necessary controllers (like diff_drive_controller).               -->

    <include file="$(find transbot_description)/launch/gazebo_control.launch" />


    <!-- ===================================================================================== -->
    <!-- |           STEP 2: LAUNCH THE ROBOT'S AUTONOMOUS DRIVER NODE (Optional)            | -->
    <!-- ===================================================================================== -->
    <!-- This section runs the 'move_base_node' that you created.                            -->
    <!-- It will only run if the 'run_driver' argument is set to 'true'.                     -->
    <!-- The 'output="screen"' tag is very useful for debugging, as it prints all ROS_INFO   -->
    <!-- messages from your C++ node directly into the terminal.                             -->

    <group if="$(arg run_driver)">
        <node name="move_base_node"
              pkg="xiaorkinematics"
              type="move_base_node"
              output="screen"
              launch-prefix="bash -c 'sleep 5; $0 $@' "/>
    </group>

</launch>